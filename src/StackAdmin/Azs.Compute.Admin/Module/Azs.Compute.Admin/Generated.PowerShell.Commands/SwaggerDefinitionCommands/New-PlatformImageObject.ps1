<#
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.

Code generated by Microsoft (R) PSSwagger
Changes may cause incorrect behavior and will be lost if the code is regenerated.
#>

<#
.SYNOPSIS
    Platform image represents a virtual machine.

.DESCRIPTION
    Platform image represents a virtual machine.

.PARAMETER ProvisioningState
    Provisioning status of the platform image.

.PARAMETER OsDisk
    Operating system used for this platform image.

.PARAMETER Id
    Id of the resource.

.PARAMETER Type
    Resource type.

.PARAMETER DataDisks
    Data disks used by the platform image.

.PARAMETER Details
    Information about the image.

.PARAMETER Name
    Name of the resource.

.PARAMETER Location
    Location of the resource.

#>
function New-PlatformImageObject
{
    param(    
        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.ProvisioningState]
        $ProvisioningState,
    
        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.OsDisk]
        $OsDisk,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Id,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Type,
    
        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.DataDisk[]]
        $DataDisks,
    
        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.ImageDetails]
        $Details,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Name,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Location
    )
    
    $Object = New-Object -TypeName Microsoft.AzureStack.Management.Compute.Admin.Models.PlatformImage

    $PSBoundParameters.GetEnumerator() | ForEach-Object { 
        if(Get-Member -InputObject $Object -Name $_.Key -MemberType Property)
        {
            $Object.$($_.Key) = $_.Value
        }
    }

    if(Get-Member -InputObject $Object -Name Validate -MemberType Method)
    {
        $Object.Validate()
    }

    return $Object
}
