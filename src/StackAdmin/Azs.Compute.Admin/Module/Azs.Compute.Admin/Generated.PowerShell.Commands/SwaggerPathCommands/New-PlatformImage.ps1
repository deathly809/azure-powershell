<#
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.

Code generated by Microsoft (R) PSSwagger
Changes may cause incorrect behavior and will be lost if the code is regenerated.
#>

<#
.SYNOPSIS
    Create a platform image.

.DESCRIPTION
    Create a new platform image.

.PARAMETER ProvisioningState
    Provisioning status of the platform image.

.PARAMETER Offer
    Name of the offer.

.PARAMETER Version
    The version of the resource.

.PARAMETER OsDisk
    Operating system used for this platform image.

.PARAMETER DataDisks
    Data disks used by the platform image.

.PARAMETER Publisher
    Name of the publisher.

.PARAMETER Details
    Information about the image.

.PARAMETER Location
    Location of the resource.

.PARAMETER Sku
    Name of the sku.

#>
function New-PlatformImage
{
    [OutputType([Microsoft.AzureStack.Management.Compute.Admin.Models.PlatformImage])]
    [CmdletBinding(DefaultParameterSetName='PlatformImages_Create')]
    param(    
        [Parameter(Mandatory = $false, ParameterSetName = 'PlatformImages_Create')]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.ProvisioningState]
        $ProvisioningState,
    
        [Parameter(Mandatory = $true, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Offer,
    
        [Parameter(Mandatory = $true, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Version,
    
        [Parameter(Mandatory = $false, ParameterSetName = 'PlatformImages_Create')]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.OsDisk]
        $OsDisk,
    
        [Parameter(Mandatory = $false, ParameterSetName = 'PlatformImages_Create')]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.DataDisk[]]
        $DataDisks,
    
        [Parameter(Mandatory = $true, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Publisher,
    
        [Parameter(Mandatory = $false, ParameterSetName = 'PlatformImages_Create')]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.ImageDetails]
        $Details,
    
        [Parameter(Mandatory = $false, ParameterSetName = 'PlatformImages_Create')]
        [string]
        $Location,
    
        [Parameter(Mandatory = $true, ParameterSetName = 'PlatformImages_Create')]
        [System.String]
        $Sku
    )

    Begin 
    {
	    Initialize-PSSwaggerDependencies -Azure
        $tracerObject = $null
        if (('continue' -eq $DebugPreference) -or ('inquire' -eq $DebugPreference)) {
            $oldDebugPreference = $global:DebugPreference
			$global:DebugPreference = "continue"
            $tracerObject = New-PSSwaggerClientTracing
            Register-PSSwaggerClientTracing -TracerObject $tracerObject
        }
	}

    Process {
    
    $ErrorActionPreference = 'Stop'

    $NewServiceClient_params = @{
        FullClientTypeName = 'Microsoft.AzureStack.Management.Compute.Admin.ComputeAdminClient'
    }

    $GlobalParameterHashtable = @{}      
    $GlobalParameterHashtable['SubscriptionId'] = $null
    if($PSBoundParameters.ContainsKey('SubscriptionId')) {
        $GlobalParameterHashtable['SubscriptionId'] = $PSBoundParameters['SubscriptionId']
    }
 
    $NewServiceClient_params['GlobalParameterHashtable'] = $GlobalParameterHashtable 
    $ComputeAdminClient = New-ServiceClient @NewServiceClient_params
    
    
        
    $flattenedParameters = @('ProvisioningState', 'OsDisk', 'Id', 'Type', 'DataDisks', 'Details', 'Name', 'Location')
    $utilityCmdParams = @{}
    $flattenedParameters | ForEach-Object {
        if($PSBoundParameters.ContainsKey($_)) {
            $utilityCmdParams[$_] = $PSBoundParameters[$_]
        }
    }
    $NewImage = New-PlatformImageObject @utilityCmdParams


    $skippedCount = 0
    $returnedCount = 0
    if ('PlatformImages_Create' -eq $PsCmdlet.ParameterSetName) {
        Write-Verbose -Message 'Performing operation CreateWithHttpMessagesAsync on $ComputeAdminClient.'
        $taskResult = $ComputeAdminClient.PlatformImages.CreateWithHttpMessagesAsync($Location, $Publisher, $Offer, $Sku, $Version, $NewImage)
    } else {
        Write-Verbose -Message 'Failed to map parameter set to operation method.'
        throw 'Module failed to find operation to execute.'
    }

    if ($TaskResult) {
        $result = $null
        $ErrorActionPreference = 'Stop'
                    
        $null = $taskResult.AsyncWaitHandle.WaitOne()
                    
        Write-Debug -Message "$($taskResult | Out-String)"


        if((Get-Member -InputObject $taskResult -Name 'Result') -and
           $taskResult.Result -and
           (Get-Member -InputObject $taskResult.Result -Name 'Body') -and
           $taskResult.Result.Body)
        {
            Write-Verbose -Message 'Operation completed successfully.'
            $result = $taskResult.Result.Body
            Write-Debug -Message "$($result | Out-String)"
            $result
        }
        elseif($taskResult.IsFaulted)
        {
            Write-Verbose -Message 'Operation failed.'
            if ($taskResult.Exception)
            {
                if ((Get-Member -InputObject $taskResult.Exception -Name 'InnerExceptions') -and $taskResult.Exception.InnerExceptions)
                {
                    foreach ($ex in $taskResult.Exception.InnerExceptions)
                    {
                        Write-Error -Exception $ex
                    }
                } elseif ((Get-Member -InputObject $taskResult.Exception -Name 'InnerException') -and $taskResult.Exception.InnerException)
                {
                    Write-Error -Exception $taskResult.Exception.InnerException
                } else {
                    Write-Error -Exception $taskResult.Exception
                }
            }
        } 
        elseif ($taskResult.IsCanceled)
        {
            Write-Verbose -Message 'Operation got cancelled.'
            Throw 'Operation got cancelled.'
        }
        else
        {
            Write-Verbose -Message 'Operation completed successfully.'
        }
        
    }
    }

    End {
        if ($tracerObject) {
            $global:DebugPreference = $oldDebugPreference
            Unregister-PSSwaggerClientTracing -TracerObject $tracerObject
        }
    }
}
